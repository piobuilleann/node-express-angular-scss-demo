/**
 *  SimpleFS 
 *  
 *  Copyright (c) 2014 Christian A. Shackleton
 */  
 
 
var os = require('os'),
	fs = require('fs'),
	q = require('q'),
	path = require("path"),
	mime = require("mime"),
	serverTempDirectory = os.tmpdir();
	user = 'simpleFsUsername',
	userBaseUrl = path.join(os.tmpdir(), user),
	busboy = require('connect-busboy');
	
 
module.exports ={
	init: function(){
		/*
		 *
		 *	To make this example as simple as possible, there will be no sessions and a static user will be used
		 *	Doing so, lest just check to see if the temp directory is even available. If not, create one
		 *	Once the directory has been created, the application will react as though it has authenticated the user
		 */
		 var ensure = this.ensureUser();
		 ensure.then(function(data){
			if(data === false) {
				var deferred = q.defer();
				fs.mkdir(userBaseUrl, function(){
					//console.log("The directory "+userBaseUrl+" has been made.");
					deferred.resolve();
				});
				return deferred.promise;
			}
		});
		
		 
	},
	ensureUser: function(){
		var deferred = q.defer();
		fs.exists(userBaseUrl, function(exists){
			deferred.resolve(exists);
		});
		return deferred.promise;
	},
	getFilesFromPath: function(dir, desiredDir){
		var deferred = q.defer();
		if(desiredDir != null){
			dir = path.join(dir, desiredDir);
		}
		//console.log("the dir is: "+dir);
		fs.readdir(dir,function(err, files){
			if(err){
				deferred.reject("There was an error in reading the directory");
			}else{
				deferred.resolve(files);
			}
		});
		return deferred.promise;		
	},
	isPathDirectory: function(files){
		//console.log(files);	
		var deferred = q.defer();
		fs.stat(path.join(userBaseUrl,file), function(err, stat){
			if(err){
				console.log(err)
			}else{
				if(stat.isDirectory() == true){
					deferred.resolve(true);
				}else{
					deferred.resolve(false);
				}
			}
		});		
		return deferred.promise;		
	},
	buildPrimeNav: function(req, res){
		var desiredDirectory;
		
		if( typeof req.param("dir") !== 'undefined'){
			desiredDirectory =  req.param("dir");
			var pathas = path.join(userBaseUrl,desiredDirectory);
		}else{
			var pathas = path.join(userBaseUrl);
			desiredDirectory = null;
		}
		
		
		
		/*GET ALL CONTENTS IN PATH*/
		this.getFilesFromPath(userBaseUrl,desiredDirectory)
		/*GET ALL DIR IN PATH*/
		.then(function(directories){
			var promises = [];
			//console.log(directories);
			var paff = [];
			directories.forEach(function(dir, index){
				var deferred = q.defer();
				var directory = [];
				//console.log(desiredDirectory);
				
				
				if(desiredDirectory == null) paff[index] = path.join(userBaseUrl, dir);
				else paff[index] = path.join(userBaseUrl, desiredDirectory, dir);
				
				//console.log("Path is do this: "+paff[index]);
				fs.stat(paff[index], function(err, stat){
					if(err){
						console.log("haha "+err)
					}else{
						if(stat.isDirectory() == true){
							deferred.resolve(dir);
						}else{
							deferred.resolve();
						}
					}
				});					
				
				
				promises.push(deferred.promise);
			});
			return q.all(promises);
		})
		.then(function(directories){
			//console.log(directories);
			res.setHeader('Cache-Control', 'no-cache');
			res.render("partials/simpleFS/primeNav.jade", {
				directory: directories
			});			
			return directories;		
		});
	},
	buildPrimeBody: function(req, res){
		var desiredDirectory;
		
		if( typeof req.param("dir") !== 'undefined'){
			desiredDirectory =  req.param("dir");
			var pathas = path.join(userBaseUrl,desiredDirectory);
		}else{
			var pathas = path.join(userBaseUrl);
			desiredDirectory = null;
		}
		
		
		
		/*GET ALL CONTENTS IN PATH*/
		this.getFilesFromPath(userBaseUrl,desiredDirectory)
		/*GET ALL DIR IN PATH*/
		.then(function(directories){
			var promises = [];
			//console.log(directories);
			var paff = [];
			directories.forEach(function(dir, index){
				var deferred = q.defer();
				var directory = [];
				//console.log(desiredDirectory);
				
				
				if(desiredDirectory == null) paff[index] = path.join(userBaseUrl, dir);
				else paff[index] = path.join(userBaseUrl, desiredDirectory, dir);
				
				//console.log("Path is do this: "+paff[index]);
				fs.stat(paff[index], function(err, stat){
					if(err){
						console.log("haha "+err)
					}else{
						if(stat.isDirectory() == false){
							deferred.resolve(dir);
						}else{
							deferred.resolve();
						}
					}
				});					
				
				
				promises.push(deferred.promise);
			});
			return q.all(promises);
		})
		.then(function(directories){
			//console.log(directories);
			res.setHeader('Cache-Control', 'no-cache');
			res.render("partials/simpleFS/partial1.jade", {
				directory: directories,
				dir: req.param('dir')
			});			
			return directories;		
		});
			
	},
	newDirectory: function(directory){
		var deferred = q.defer();
		
		fs.mkdir(path.join(userBaseUrl, directory),function(err, files){
			if(err){
				if(err.code == 'EEXIST') deferred.resolve(err.code);
				deferred.reject("There was an error in reading the directory");
			}else{
				deferred.resolve(files);
			}
		});
		return deferred.promise;			
	},
	readFile: function(path){
		var deferred = q.defer();
		fs.readFile(path, function (err, data) {
			if(err){
				deferred.reject(err);
				//console.log("Oh No... an error wit the upload "+err);
			}else{
				deferred.resolve(data);
			}
		});	
		return deferred.promise;	
	},
	uploadFile: function(req, res){
		var deferred = q.defer();	
		var fstream;
		req.pipe(req.busboy);
		req.busboy.on('file', function (fieldname, file, filename) {
			if( typeof req.param("dir") !== 'undefined') {
				var dir = req.param("dir");
				fstream = fs.createWriteStream(path.join(userBaseUrl,dir,filename));
			}else{
				fstream = fs.createWriteStream(path.join(userBaseUrl,filename));
			}
			
			file.pipe(fstream);
			fstream.on('close', function (err) {
				if(err){
					console.log("Oh No... an error wit the upload");
				}else{
					deferred.resolve();
				}
				res.redirect('back');
			});
		});		
		return deferred.promise;
	},
	getStat: function(dir){
		var deferred = q.defer();	
		
		fs.stat(dir, function(err, stat){
			if(err){
				console.log(err)
			}else{
				deferred.resolve(stat);				
			}
		});		
		return deferred.promise;	
	},
	removeFile: function(file){
		var deferred = q.defer();	
		var dir = path.join(userBaseUrl, file);
		
		fs.unlink(dir, function(err, stat){
			if(err){
				deferred.reject("There was an error in removing the file: "+err);
			}else{
				deferred.resolve(stat);				
			}
		});		
		return deferred.promise;	
	},
	removeFileDeep: function(dir,file){
		var deferred = q.defer();	
		var dir = path.join(userBaseUrl, dir, file);
		
		fs.unlink(dir, function(err, stat){
			if(err){
				deferred.reject("There was an error in removing the file: "+err);
			}else{
				deferred.resolve(stat);				
			}
		});		
		return deferred.promise;	
	},
	removeFileFromPath: function(path){
		var deferred = q.defer();	
		
		fs.unlink(path, function(err, stat){
			if(err){
				deferred.reject("There was an error in removing the file: "+err);
			}else{
				deferred.resolve(stat);				
			}
		});		
		return deferred.promise;	
	},
	removeDir: function(dir){
		var deferred = q.defer();	
		var dir = path.join(userBaseUrl, dir);
		
		fs.rmdir(dir, function(err, stat){
			if(err){
				deferred.reject("There was an error in removing the directory: "+err);
			}else{
				deferred.resolve(stat);				
			}
		});		
		return deferred.promise;	
	},
	viewFile: function(req, res){
		var filename = path.join(userBaseUrl,req.param("dir"));
		var deferred = q.defer();
		this.readFile(filename).then(function(data){
			console.log("Requesting "+mime.lookup(filename));
			console.log(data);
			res.setHeader('Cache-Control', 'no-cache');
			res.writeHead({'Content-Type': 'text/html'});
			var bigBuff = new Buffer(data).toString('base64');
			res.write('<button ng-click="deleteImage(\''+req.param("dir")+'\')">Delete</button><br /><img style="width:100%;" src="data:'+mime.lookup(filename)+';base64,'+bigBuff+'"/>');
			res.send();
			bigBuff = null;
			deferred.resolve(res)
		});
		return deferred.promise;
	},
	viewFileDeep: function(req, res){
		var filename = path.join(userBaseUrl,req.param("dir"),req.param("file"));
		var deferred = q.defer();
		this.readFile(filename).then(function(data){
			console.log("Requesting "+mime.lookup(filename));
			res.setHeader('Cache-Control', 'no-cache');
			res.writeHead({'Content-Type': 'text/html'});
			var bigBuff = new Buffer(data).toString('base64');
			res.write('<button ng-click="deleteImageDeep(\''+req.param("dir")+'\', \''+req.param("file")+'\')">Delete</button><br /><img style="width:100%;" src="data:'+mime.lookup(filename)+';base64,'+bigBuff+'"/>');
			res.send();
			bigBuff = null;
			deferred.resolve(res)
		});
		return deferred.promise;
	},
	writeFile: function(location, data){
		var deferred = q.defer();	
		fs.writeFile(location, data, function(err, stat){
			if(err){
				console.log(err);
				deferred.reject("There was an error in removing the directory: "+err);
			}else{
				deferred.resolve(stat);				
			}
		});		
		return deferred.promise;		
	},
	moveFile: function(req, res){
		var pathFrom = req.param("pathFrom");
		var pathTo = req.param("pathTo");
		var file = req.param("file");
		var pth = path.join(userBaseUrl, pathFrom, file);
		var pthTo = path.join(userBaseUrl, pathTo, file);
		var tis = this;
		
		tis.readFile(pth).then(function(data){
			tis.writeFile(pthTo, data).then(function(statis){
				tis.removeFileFromPath(pth).then(function(){
					res.json("complete");
				});
			})
		});
	}
};  